import{H as S,w as p,V as h}from"./GLTFLoader-Cpm_xSlR.js";const e=new S,l=new p,A=new h,m=new h,g=new h;class w{constructor(t){this.geometry=t.geometry,this.randomFunction=Math.random,this.indexAttribute=this.geometry.index,this.positionAttribute=this.geometry.getAttribute("position"),this.normalAttribute=this.geometry.getAttribute("normal"),this.colorAttribute=this.geometry.getAttribute("color"),this.uvAttribute=this.geometry.getAttribute("uv"),this.weightAttribute=null,this.distribution=null}setWeightAttribute(t){return this.weightAttribute=t?this.geometry.getAttribute(t):null,this}build(){const t=this.indexAttribute,n=this.positionAttribute,u=this.weightAttribute,o=t?t.count/3:n.count/3,d=new Float32Array(o);for(let r=0;r<o;r++){let b=1,c=3*r,a=3*r+1,f=3*r+2;t&&(c=t.getX(c),a=t.getX(a),f=t.getX(f)),u&&(b=u.getX(c)+u.getX(a)+u.getX(f)),e.a.fromBufferAttribute(n,c),e.b.fromBufferAttribute(n,a),e.c.fromBufferAttribute(n,f),b*=e.getArea(),d[r]=b}const i=new Float32Array(o);let s=0;for(let r=0;r<o;r++)s+=d[r],i[r]=s;return this.distribution=i,this}setRandomGenerator(t){return this.randomFunction=t,this}sample(t,n,u,o){const d=this.sampleFaceIndex();return this.sampleFace(d,t,n,u,o)}sampleFaceIndex(){const t=this.distribution[this.distribution.length-1];return this.binarySearch(this.randomFunction()*t)}binarySearch(t){const n=this.distribution;let u=0,o=n.length-1,d=-1;for(;u<=o;){const i=Math.ceil((u+o)/2);if(i===0||n[i-1]<=t&&n[i]>t){d=i;break}else t<n[i]?o=i-1:u=i+1}return d}sampleFace(t,n,u,o,d){let i=this.randomFunction(),s=this.randomFunction();i+s>1&&(i=1-i,s=1-s);const r=this.indexAttribute;let b=t*3,c=t*3+1,a=t*3+2;return r&&(b=r.getX(b),c=r.getX(c),a=r.getX(a)),e.a.fromBufferAttribute(this.positionAttribute,b),e.b.fromBufferAttribute(this.positionAttribute,c),e.c.fromBufferAttribute(this.positionAttribute,a),n.set(0,0,0).addScaledVector(e.a,i).addScaledVector(e.b,s).addScaledVector(e.c,1-(i+s)),u!==void 0&&(this.normalAttribute!==void 0?(e.a.fromBufferAttribute(this.normalAttribute,b),e.b.fromBufferAttribute(this.normalAttribute,c),e.c.fromBufferAttribute(this.normalAttribute,a),u.set(0,0,0).addScaledVector(e.a,i).addScaledVector(e.b,s).addScaledVector(e.c,1-(i+s)).normalize()):e.getNormal(u)),o!==void 0&&this.colorAttribute!==void 0&&(e.a.fromBufferAttribute(this.colorAttribute,b),e.b.fromBufferAttribute(this.colorAttribute,c),e.c.fromBufferAttribute(this.colorAttribute,a),l.set(0,0,0).addScaledVector(e.a,i).addScaledVector(e.b,s).addScaledVector(e.c,1-(i+s)),o.r=l.x,o.g=l.y,o.b=l.z),d!==void 0&&this.uvAttribute!==void 0&&(A.fromBufferAttribute(this.uvAttribute,b),m.fromBufferAttribute(this.uvAttribute,c),g.fromBufferAttribute(this.uvAttribute,a),d.set(0,0).addScaledVector(A,i).addScaledVector(m,s).addScaledVector(g,1-(i+s))),this}}export{w as M};
